namespace System
{
    public static class IdentityGenerator
    {
        /// <summary>
        /// Create new sequential Guid
        /// </summary>
        /// <returns>Guid</returns>
        public static Guid NewSequentialGuid()
        {
            byte[] _uid = Guid.NewGuid().ToByteArray();
            byte[] _binDate = BitConverter.GetBytes(DateTime.UtcNow.Ticks);

            byte[] _sequentialGuid = new byte[_uid.Length];

            _sequentialGuid[0] = _uid[0];
            _sequentialGuid[1] = _uid[1];
            _sequentialGuid[2] = _uid[2];
            _sequentialGuid[3] = _uid[3];
            _sequentialGuid[4] = _uid[4];
            _sequentialGuid[5] = _uid[5];
            _sequentialGuid[6] = _uid[6];
            // set the first part of the 8th byte to '1100' so     
            // later we'll be able to validate it was generated by us   

            _sequentialGuid[7] = (byte)(0xc0 | (0xf & _uid[7]));

            // the last 8 bytes are sequential,    
            // it minimizes index fragmentation   
            // to a degree as long as there are not a large    
            // number of Sequential-Guids generated per millisecond
            _sequentialGuid[9] = _binDate[0];
            _sequentialGuid[8] = _binDate[1];
            _sequentialGuid[15] = _binDate[2];
            _sequentialGuid[14] = _binDate[3];
            _sequentialGuid[13] = _binDate[4];
            _sequentialGuid[12] = _binDate[5];
            _sequentialGuid[11] = _binDate[6];
            _sequentialGuid[10] = _binDate[7];

            return new Guid(_sequentialGuid);
        }
    }
}
